# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rmagick` gem.
# Please instead update this file by running `bin/tapioca sync`.

# typed: true

module Magick
  private

  def colors; end
  def fonts; end
  def init_formats; end
  def limit_resource(*_arg0); end
  def set_cache_threshold(_arg0); end
  def set_log_event_mask(*_arg0); end
  def set_log_format(_arg0); end

  class << self
    def colors; end
    def fonts; end
    def formats; end
    def init_formats; end
    def limit_resource(*_arg0); end
    def set_cache_threshold(_arg0); end
    def set_log_event_mask(*_arg0); end
    def set_log_format(_arg0); end
    def trace_proc=(p); end
  end
end

Magick::AbsQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::AbsoluteErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::AbsoluteIntent = T.let(T.unsafe(nil), Magick::RenderingIntent)
Magick::ActivateAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::AddModulusQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::AddNoisePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::AddQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::AffineDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)

class Magick::AffineMatrix < ::Struct
  def rx; end
  def rx=(_); end
  def ry; end
  def ry=(_); end
  def sx; end
  def sx=(_); end
  def sy; end
  def sy=(_); end
  def tx; end
  def tx=(_); end
  def ty; end
  def ty=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::AffineProjectionDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)

class Magick::AlignType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::AllChannels = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::AllCompliance = T.let(T.unsafe(nil), Magick::ComplianceType)
Magick::AllValues = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::AlphaChannel = T.let(T.unsafe(nil), Magick::ChannelType)

class Magick::AlphaChannelOption < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::AnchorType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::AndQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::AnyStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::AnyStyle = T.let(T.unsafe(nil), Magick::StyleType)
Magick::AnyWeight = T.let(T.unsafe(nil), Magick::WeightType)
Magick::ArcDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::ArcsinFunction = T.let(T.unsafe(nil), Magick::MagickFunction)
Magick::ArctanFunction = T.let(T.unsafe(nil), Magick::MagickFunction)
Magick::AreaGeometry = T.let(T.unsafe(nil), Magick::GeometryValue)
Magick::AreaValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::AspectGeometry = T.let(T.unsafe(nil), Magick::GeometryValue)
Magick::AspectValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::AssociateAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::AtopCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::Average16InterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::Average9InterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::AverageInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::B44ACompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::B44Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::BZipCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::BackgroundAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::BackgroundDispose = T.let(T.unsafe(nil), Magick::DisposeType)
Magick::BackgroundInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::BackgroundVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::BarrelDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::BarrelInverseDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::BartlettFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::BarycentricColorInterpolate = T.let(T.unsafe(nil), Magick::SparseColorMethod)
Magick::BesselFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::BilevelType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::BilinearColorInterpolate = T.let(T.unsafe(nil), Magick::SparseColorMethod)
Magick::BilinearDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::BilinearForwardDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::BilinearInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::BilinearReverseDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::BinomialKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::BlackChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::BlackVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::BlackmanFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::BlendCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::BlendInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::BlueChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::BlurCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::BlurKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::BlurPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::BohmanFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::BoldWeight = T.let(T.unsafe(nil), Magick::WeightType)
Magick::BolderWeight = T.let(T.unsafe(nil), Magick::WeightType)
Magick::BottomHatMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::BottomLeftOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::BottomRightOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::BoxFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::BrightnessPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::BumpmapCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CMYColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::CMYKColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::CatromFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::CatromInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::CenterAlign = T.let(T.unsafe(nil), Magick::AlignType)
Magick::CenterGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::ChangeMaskCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::ChannelType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::CharPixel = T.let(T.unsafe(nil), Magick::StorageType)
Magick::CharcoalDrawingPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ChebyshevKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::CheckerTileVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::ChiNegative = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::ChiValue = T.let(T.unsafe(nil), Magick::GeometryFlags)

class Magick::Chromaticity < ::Struct
  def blue_primary; end
  def blue_primary=(_); end
  def green_primary; end
  def green_primary=(_); end
  def red_primary; end
  def red_primary=(_); end
  def to_s; end
  def white_point; end
  def white_point=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

class Magick::ClassType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::ClearCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CloseIntensityMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::CloseMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::CoalesceLayer = T.let(T.unsafe(nil), Magick::LayerMethod)

class Magick::Color < ::Struct
  def color; end
  def color=(_); end
  def compliance; end
  def compliance=(_); end
  def name; end
  def name=(_); end
  def to_s; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::ColorBurnCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ColorDodgeCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ColorSeparationAlphaType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::ColorSeparationType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::ColorizeCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::ColorspaceType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::CometKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::CompareAnyLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::CompareClearLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::CompareOverlayLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::CompassKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)

class Magick::ComplianceType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::CompositeLayer = T.let(T.unsafe(nil), Magick::LayerMethod)

class Magick::CompositeOperator < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::CompressionType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::CondensedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::ConvexHullKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::ConvolveMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::CopyAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::CopyAlphaCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyBlackCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyBlueCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyCyanCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyGreenCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyMagentaCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyRedCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CopyYellowCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::CornersKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::CorrelateMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::CorrelateNormalizeValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::CosineFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::CosineQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::CrossKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::CubicFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::CyanChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::Cylinder2PlaneDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::DXT1Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::DXT3Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::DXT5Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::DarkenCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DarkenIntensityCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DePolarDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::DeactivateAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::DecimalValue = T.let(T.unsafe(nil), Magick::GeometryFlags)

class Magick::DecorationType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::DefaultChannels = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::DespecklePreview = T.let(T.unsafe(nil), Magick::PreviewType)
class Magick::DestroyedImageError < ::StandardError; end
Magick::DiagonalsKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::DiamondKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::DifferenceCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DilateIntensityMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::DilateMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::DirectClass = T.let(T.unsafe(nil), Magick::ClassType)
Magick::DisassociateAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::DiskKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::DisplaceCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DisposeLayer = T.let(T.unsafe(nil), Magick::LayerMethod)

class Magick::DisposeType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::DissolveCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DistanceMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::DistortCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::DistortMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::DitherMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::DitherVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::DivideDstCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DivideQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::DivideSrcCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DoGKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::DoublePixel = T.let(T.unsafe(nil), Magick::StorageType)

class Magick::Draw
  def initialize; end

  def affine(sx, rx, ry, sy, tx, ty); end
  def affine=(_arg0); end
  def align=(_arg0); end
  def alpha(x, y, method); end
  def annotate(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5); end
  def arc(start_x, start_y, end_x, end_y, start_degrees, end_degrees); end
  def bezier(*points); end
  def circle(origin_x, origin_y, perim_x, perim_y); end
  def clip_path(name); end
  def clip_rule(rule); end
  def clip_units(unit); end
  def clone; end
  def color(x, y, method); end
  def composite(*_arg0); end
  def decorate(decoration); end
  def decorate=(_arg0); end
  def define_clip_path(name); end
  def density=(_arg0); end
  def draw(_arg0); end
  def dup; end
  def ellipse(origin_x, origin_y, width, height, arc_start, arc_end); end
  def encoding(encoding); end
  def encoding=(_arg0); end
  def fill(colorspec); end
  def fill=(_arg0); end
  def fill_color(colorspec); end
  def fill_opacity(opacity); end
  def fill_pattern(colorspec); end
  def fill_pattern=(_arg0); end
  def fill_rule(rule); end
  def font(name); end
  def font=(_arg0); end
  def font_family(name); end
  def font_family=(_arg0); end
  def font_size(points); end
  def font_stretch(stretch); end
  def font_stretch=(_arg0); end
  def font_style(style); end
  def font_style=(_arg0); end
  def font_weight(weight); end
  def font_weight=(_arg0); end
  def get_multiline_type_metrics(*_arg0); end
  def get_type_metrics(*_arg0); end
  def gravity(grav); end
  def gravity=(_arg0); end
  def image(composite, x, y, width, height, image_file_path); end
  def inspect; end
  def interline_spacing(space); end
  def interline_spacing=(_arg0); end
  def interword_spacing(space); end
  def interword_spacing=(_arg0); end
  def kerning(space); end
  def kerning=(_arg0); end
  def line(start_x, start_y, end_x, end_y); end
  def marshal_dump; end
  def marshal_load(_arg0); end
  def opacity(opacity); end
  def path(cmds); end
  def pattern(name, x, y, width, height); end
  def point(x, y); end
  def pointsize(points); end
  def pointsize=(_arg0); end
  def polygon(*points); end
  def polyline(*points); end
  def pop(*what); end
  def primitive(_arg0); end
  def push(*what); end
  def rectangle(upper_left_x, upper_left_y, lower_right_x, lower_right_y); end
  def rotate(angle); end
  def rotation=(_arg0); end
  def roundrectangle(center_x, center_y, width, height, corner_width, corner_height); end
  def scale(x, y); end
  def skewx(angle); end
  def skewy(angle); end
  def stroke(colorspec); end
  def stroke=(_arg0); end
  def stroke_antialias(bool); end
  def stroke_color(colorspec); end
  def stroke_dasharray(*list); end
  def stroke_dashoffset(value = T.unsafe(nil)); end
  def stroke_linecap(value); end
  def stroke_linejoin(value); end
  def stroke_miterlimit(value); end
  def stroke_opacity(opacity); end
  def stroke_pattern(colorspec); end
  def stroke_pattern=(_arg0); end
  def stroke_width(pixels); end
  def stroke_width=(_arg0); end
  def text(x, y, text); end
  def text_align(alignment); end
  def text_anchor(anchor); end
  def text_antialias(boolean); end
  def text_antialias=(_arg0); end
  def text_undercolor(color); end
  def tile=(_arg0); end
  def translate(x, y); end
  def undercolor=(_arg0); end

  private

  def check_opacity(opacity); end
  def enquote(str); end
  def initialize_copy(_arg0); end
end

Magick::Draw::ALIGN_TYPE_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::ANCHOR_TYPE_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::DECORATION_TYPE_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::FONT_WEIGHT_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::GRAVITY_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::PAINT_METHOD_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::STRETCH_TYPE_NAMES = T.let(T.unsafe(nil), Hash)
Magick::Draw::STYLE_TYPE_NAMES = T.let(T.unsafe(nil), Hash)
Magick::DstAtopCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DstCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DstInCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DstOutCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DstOverCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::DullPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::EastGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::EdgeDetectPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::EdgeInMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::EdgeMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::EdgeOutMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::EdgeVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::EdgesKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::EndAnchor = T.let(T.unsafe(nil), Magick::AnchorType)

class Magick::EndianType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::Enum
  include ::Comparable

  def initialize(_arg0, _arg1); end

  def <=>(_arg0); end
  def ===(_arg0); end
  def to_i; end
  def to_s; end
  def |(_arg0); end
end

Magick::ErodeIntensityMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::ErodeMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::EuclideanKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::ExclusionCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ExpandedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::ExponentialQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::ExtraCondensedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::ExtraExpandedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::ExtractAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
class Magick::FatalImageMagickError < ::StandardError; end
Magick::FaxCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::FillToBorderMethod = T.let(T.unsafe(nil), Magick::PaintMethod)

class Magick::FilterType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::FlattenLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::FloatPixel = T.let(T.unsafe(nil), Magick::StorageType)
Magick::FloodfillMethod = T.let(T.unsafe(nil), Magick::PaintMethod)
Magick::FloydSteinbergDitherMethod = T.let(T.unsafe(nil), Magick::DitherMethod)

class Magick::Font < ::Struct
  def description; end
  def description=(_); end
  def encoding; end
  def encoding=(_); end
  def family; end
  def family=(_); end
  def format; end
  def format=(_); end
  def foundry; end
  def foundry=(_); end
  def name; end
  def name=(_); end
  def stretch; end
  def stretch=(_); end
  def style; end
  def style=(_); end
  def to_s; end
  def weight; end
  def weight=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::ForgetGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::FreiChenKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::FuzzErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::GIFInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::GRAYColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::GammaPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::GaussianFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::GaussianKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::GaussianNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::GaussianNoiseQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)

class Magick::Geometry
  def initialize(width = T.unsafe(nil), height = T.unsafe(nil), x = T.unsafe(nil), y = T.unsafe(nil), flag = T.unsafe(nil)); end

  def flag; end
  def flag=(_arg0); end
  def height; end
  def height=(_arg0); end
  def to_s; end
  def width; end
  def width=(_arg0); end
  def x; end
  def x=(_arg0); end
  def y; end
  def y=(_arg0); end

  class << self
    def from_s(str); end
  end
end

Magick::Geometry::FLAGS = T.let(T.unsafe(nil), Array)
Magick::Geometry::H = T.let(T.unsafe(nil), Regexp)
Magick::Geometry::RE = T.let(T.unsafe(nil), Regexp)
Magick::Geometry::RFLAGS = T.let(T.unsafe(nil), Hash)
Magick::Geometry::W = T.let(T.unsafe(nil), Regexp)
Magick::Geometry::X = T.let(T.unsafe(nil), Regexp)
Magick::Geometry::Y = T.let(T.unsafe(nil), Regexp)

class Magick::GeometryFlags < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::GeometryValue < ::Magick::Enum; end

class Magick::GradientFill
  def initialize(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5); end

  def fill(_arg0); end
end

class Magick::GravityType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::GrayChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::GrayVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::GrayscaleAlphaType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::GrayscalePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::GrayscaleType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::GreaterGeometry = T.let(T.unsafe(nil), Magick::GeometryValue)
Magick::GreaterValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::GreenChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::Group4Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::HCLColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HCLpColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HSBColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HSIColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HSLColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HSVColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HWBColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::HammingFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::HanningFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::HardLightCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::HardMixCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::HatchFill
  def initialize(bgcolor, hatchcolor = T.unsafe(nil), dist = T.unsafe(nil)); end

  def fill(img); end
end

Magick::HeightValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::HermiteFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::HitAndMissMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::HorizontalTileEdgeVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::HorizontalTileVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::HueChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::HueCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::HuePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::IMAGEMAGICK_VERSION = T.let(T.unsafe(nil), String)
module Magick::IPTC; end
module Magick::IPTC::Application; end
Magick::IPTC::Application::Abstract = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Action_Advised = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Audio_Duration = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Audio_Outcue = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Audio_Sampling_Rate = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Audio_Sampling_Resolution = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Audio_Type = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Author = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Author_Position = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::By_Line = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::By_Line_Title = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Caption = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Caption_Writer = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Category = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::City = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Contact = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Content_Location_Code = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Content_Location_Name = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Copyright_Notice = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Country_Primary_Location_Code = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Country_Primary_Location_Name = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Credit = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Date_Created = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Digital_Creation_Date = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Digital_Creation_Time = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Edit_Status = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Editor = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Editorial_Update = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Expiration_Date = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Expiration_Time = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Fixture_Identifier = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Headline = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Image_Orientation = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Image_Type = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Keywords = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Language_Identifier = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::ObjectData_Preview_Data = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::ObjectData_Preview_File_Format = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::ObjectData_Preview_File_Format_Version = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Object_Cycle = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Object_Name = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Object_Type_Reference = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Original_Transmission_Reference = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Originating_Program = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Program_Version = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Province = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Rasterized_Caption = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Record_Version = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Reference_Date = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Reference_Number = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Reference_Service = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Release_Date = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Release_Time = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Source = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Special_Instructions = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::State = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Sub_Location = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Subject_Reference = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Supplemental_Category = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Time_Created = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Title = T.let(T.unsafe(nil), String)
Magick::IPTC::Application::Urgency = T.let(T.unsafe(nil), String)
module Magick::IPTC::Envelope; end
Magick::IPTC::Envelope::ARM_Identifier = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::ARM_Version = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Coded_Character_Set = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Date_Sent = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Destination = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Envelope_Number = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Envelope_Priority = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::File_Format = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::File_Format_Version = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Model_Version = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Product_ID = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Service_Identifier = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Time_Sent = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::UNO = T.let(T.unsafe(nil), String)
Magick::IPTC::Envelope::Unique_Name_of_Object = T.let(T.unsafe(nil), String)
module Magick::IPTC::ObjectData; end
Magick::IPTC::ObjectData::Subfile = T.let(T.unsafe(nil), String)
module Magick::IPTC::Post_ObjectData_Descriptor; end
Magick::IPTC::Post_ObjectData_Descriptor::Confirmed_ObjectData_Size = T.let(T.unsafe(nil), String)
module Magick::IPTC::Pre_ObjectData_Descriptor; end
Magick::IPTC::Pre_ObjectData_Descriptor::Max_Subfile_Size = T.let(T.unsafe(nil), String)
Magick::IPTC::Pre_ObjectData_Descriptor::Maximum_ObjectData_Size = T.let(T.unsafe(nil), String)
Magick::IPTC::Pre_ObjectData_Descriptor::ObjectData_Size_Announced = T.let(T.unsafe(nil), String)
Magick::IPTC::Pre_ObjectData_Descriptor::Size_Mode = T.let(T.unsafe(nil), String)

class Magick::Image
  include ::Comparable

  def initialize(*_arg0); end

  def <=>(_arg0); end
  def [](_arg0); end
  def []=(_arg0, _arg1); end
  def __display__(*_arg0); end
  def _dump(_arg0); end
  def adaptive_blur(*_arg0); end
  def adaptive_blur_channel(*_arg0); end
  def adaptive_resize(*_arg0); end
  def adaptive_sharpen(*_arg0); end
  def adaptive_sharpen_channel(*_arg0); end
  def adaptive_threshold(*_arg0); end
  def add_compose_mask(_arg0); end
  def add_noise(_arg0); end
  def add_noise_channel(*_arg0); end
  def add_profile(_arg0); end
  def affine_transform(_arg0); end
  def affinity(*_arg0); end
  def alpha(*_arg0); end
  def alpha?; end
  def annotate(draw, width, height, x, y, text, &block); end
  def auto_gamma_channel(*_arg0); end
  def auto_level_channel(*_arg0); end
  def auto_orient; end
  def auto_orient!; end
  def background_color; end
  def background_color=(_arg0); end
  def base_columns; end
  def base_filename; end
  def base_rows; end
  def bias; end
  def bias=(_arg0); end
  def bilevel_channel(*_arg0); end
  def black_point_compensation; end
  def black_point_compensation=(_arg0); end
  def black_threshold(*_arg0); end
  def blend(*_arg0); end
  def blue_shift(*_arg0); end
  def blur_channel(*_arg0); end
  def blur_image(*_arg0); end
  def border(_arg0, _arg1, _arg2); end
  def border!(_arg0, _arg1, _arg2); end
  def border_color; end
  def border_color=(_arg0); end
  def bounding_box; end
  def change_geometry(_arg0); end
  def change_geometry!(_arg0); end
  def changed?; end
  def channel(_arg0); end
  def channel_compare(*_arg0); end
  def channel_depth(*_arg0); end
  def channel_entropy(*_arg0); end
  def channel_extrema(*_arg0); end
  def channel_mean(*_arg0); end
  def charcoal(*_arg0); end
  def check_destroyed; end
  def chop(_arg0, _arg1, _arg2, _arg3); end
  def chromaticity; end
  def chromaticity=(_arg0); end
  def class_type; end
  def class_type=(_arg0); end
  def clone; end
  def clut_channel(*_arg0); end
  def color_fill_to_border(x, y, fill); end
  def color_flood_fill(_arg0, _arg1, _arg2, _arg3, _arg4); end
  def color_floodfill(x, y, fill); end
  def color_histogram; end
  def color_point(x, y, fill); end
  def color_profile; end
  def color_profile=(_arg0); end
  def color_reset!(fill); end
  def colorize(*_arg0); end
  def colormap(*_arg0); end
  def colors; end
  def colorspace; end
  def colorspace=(_arg0); end
  def columns; end
  def compare_channel(*_arg0); end
  def compose; end
  def compose=(_arg0); end
  def composite(*_arg0); end
  def composite!(*_arg0); end
  def composite_affine(_arg0, _arg1); end
  def composite_channel(*_arg0); end
  def composite_channel!(*_arg0); end
  def composite_mathematics(*_arg0); end
  def composite_tiled(*_arg0); end
  def composite_tiled!(*_arg0); end
  def compress_colormap!; end
  def compression; end
  def compression=(_arg0); end
  def contrast(*_arg0); end
  def contrast_stretch_channel(*_arg0); end
  def convolve(_arg0, _arg1); end
  def convolve_channel(*_arg0); end
  def copy; end
  def crop(*_arg0); end
  def crop!(*_arg0); end
  def crop_resized(ncols, nrows = T.unsafe(nil), gravity = T.unsafe(nil)); end
  def crop_resized!(ncols, nrows = T.unsafe(nil), gravity = T.unsafe(nil)); end
  def cur_image; end
  def cycle_colormap(_arg0); end
  def decipher(_arg0); end
  def define(_arg0, _arg1); end
  def delay; end
  def delay=(_arg0); end
  def delete_compose_mask; end
  def delete_profile(_arg0); end
  def density; end
  def density=(_arg0); end
  def depth; end
  def deskew(*_arg0); end
  def despeckle; end
  def destroy!; end
  def destroyed?; end
  def difference(_arg0); end
  def directory; end
  def dispatch(*_arg0); end
  def displace(*_arg0); end
  def display; end
  def dispose; end
  def dispose=(_arg0); end
  def dissolve(*_arg0); end
  def distort(*_arg0); end
  def distortion_channel(*_arg0); end
  def dup; end
  def each_iptc_dataset; end
  def each_pixel; end
  def each_profile; end
  def edge(*_arg0); end
  def emboss(*_arg0); end
  def encipher(_arg0); end
  def endian; end
  def endian=(_arg0); end
  def enhance; end
  def equalize; end
  def equalize_channel(*_arg0); end
  def erase!; end
  def excerpt(_arg0, _arg1, _arg2, _arg3); end
  def excerpt!(_arg0, _arg1, _arg2, _arg3); end
  def export_pixels(*_arg0); end
  def export_pixels_to_str(*_arg0); end
  def extent(*_arg0); end
  def extract_info; end
  def extract_info=(_arg0); end
  def filename; end
  def filesize; end
  def filter; end
  def filter=(_arg0); end
  def find_similar_region(*_arg0); end
  def flip; end
  def flip!; end
  def flop; end
  def flop!; end
  def format; end
  def format=(_arg0); end
  def frame(*_arg0); end
  def function_channel(*_arg0); end
  def fuzz; end
  def fuzz=(_arg0); end
  def fx(*_arg0); end
  def gamma; end
  def gamma=(_arg0); end
  def gamma_channel(*_arg0); end
  def gamma_correct(*_arg0); end
  def gaussian_blur(*_arg0); end
  def gaussian_blur_channel(*_arg0); end
  def geometry; end
  def geometry=(_arg0); end
  def get_exif_by_entry(*entry); end
  def get_exif_by_number(*tag); end
  def get_iptc_dataset(ds); end
  def get_pixels(_arg0, _arg1, _arg2, _arg3); end
  def gravity; end
  def gravity=(_arg0); end
  def gray?; end
  def grey?; end
  def histogram?; end
  def image_type; end
  def image_type=(_arg0); end
  def implode(*_arg0); end
  def import_pixels(*_arg0); end
  def inspect; end
  def interlace; end
  def interlace=(_arg0); end
  def iptc_profile; end
  def iptc_profile=(_arg0); end
  def iterations; end
  def iterations=(_arg0); end
  def level(black_point = T.unsafe(nil), white_point = T.unsafe(nil), gamma = T.unsafe(nil)); end
  def level2(*_arg0); end
  def level_channel(*_arg0); end
  def level_colors(*_arg0); end
  def levelize_channel(*_arg0); end
  def linear_stretch(*_arg0); end
  def liquid_rescale(*_arg0); end
  def magnify; end
  def magnify!; end
  def marshal_dump; end
  def marshal_load(_arg0); end
  def mask(*_arg0); end
  def matte_color; end
  def matte_color=(_arg0); end
  def matte_fill_to_border(x, y); end
  def matte_flood_fill(*_arg0); end
  def matte_floodfill(x, y); end
  def matte_point(x, y); end
  def matte_replace(x, y); end
  def matte_reset!; end
  def mean_error_per_pixel; end
  def median_filter(*_arg0); end
  def mime_type; end
  def minify; end
  def minify!; end
  def modulate(*_arg0); end
  def monitor=(_arg0); end
  def monochrome?; end
  def montage; end
  def morphology(_arg0, _arg1, _arg2); end
  def morphology_channel(_arg0, _arg1, _arg2, _arg3); end
  def motion_blur(*_arg0); end
  def negate(*_arg0); end
  def negate_channel(*_arg0); end
  def normalize; end
  def normalize_channel(*_arg0); end
  def normalized_maximum_error; end
  def normalized_mean_error; end
  def number_colors; end
  def offset; end
  def offset=(_arg0); end
  def oil_paint(*_arg0); end
  def opaque(_arg0, _arg1); end
  def opaque?; end
  def opaque_channel(*_arg0); end
  def ordered_dither(*_arg0); end
  def orientation; end
  def orientation=(_arg0); end
  def page; end
  def page=(_arg0); end
  def paint_transparent(*_arg0); end
  def palette?; end
  def pixel_color(*_arg0); end
  def pixel_interpolation_method; end
  def pixel_interpolation_method=(_arg0); end
  def polaroid(*_arg0); end
  def posterize(*_arg0); end
  def preview(_arg0); end
  def profile!(_arg0, _arg1); end
  def properties; end
  def quality; end
  def quantize(*_arg0); end
  def quantum_depth; end
  def quantum_operator(*_arg0); end
  def radial_blur(_arg0); end
  def radial_blur_channel(*_arg0); end
  def raise(*_arg0); end
  def random_threshold_channel(*_arg0); end
  def recolor(_arg0); end
  def reduce_noise(_arg0); end
  def remap(*_arg0); end
  def rendering_intent; end
  def rendering_intent=(_arg0); end
  def resample(*_arg0); end
  def resample!(*_arg0); end
  def resize(*_arg0); end
  def resize!(*_arg0); end
  def resize_to_fill(ncols, nrows = T.unsafe(nil), gravity = T.unsafe(nil)); end
  def resize_to_fill!(ncols, nrows = T.unsafe(nil), gravity = T.unsafe(nil)); end
  def resize_to_fit(cols, rows = T.unsafe(nil)); end
  def resize_to_fit!(cols, rows = T.unsafe(nil)); end
  def roll(_arg0, _arg1); end
  def rotate(*_arg0); end
  def rotate!(*_arg0); end
  def rows; end
  def sample(*_arg0); end
  def sample!(*_arg0); end
  def scale(*_arg0); end
  def scale!(*_arg0); end
  def scene; end
  def segment(*_arg0); end
  def selective_blur_channel(*_arg0); end
  def separate(*_arg0); end
  def sepiatone(*_arg0); end
  def set_channel_depth(_arg0, _arg1); end
  def shade(*_arg0); end
  def shadow(*_arg0); end
  def sharpen(*_arg0); end
  def sharpen_channel(*_arg0); end
  def shave(_arg0, _arg1); end
  def shave!(_arg0, _arg1); end
  def shear(_arg0, _arg1); end
  def sigmoidal_contrast_channel(*_arg0); end
  def signature; end
  def sketch(*_arg0); end
  def solarize(*_arg0); end
  def sparse_color(*_arg0); end
  def splice(*_arg0); end
  def spread(*_arg0); end
  def start_loop; end
  def start_loop=(_arg0); end
  def stegano(_arg0, _arg1); end
  def stereo(_arg0); end
  def store_pixels(_arg0, _arg1, _arg2, _arg3, _arg4); end
  def strip!; end
  def swirl(_arg0); end
  def texture_fill_to_border(x, y, texture); end
  def texture_flood_fill(_arg0, _arg1, _arg2, _arg3, _arg4); end
  def texture_floodfill(x, y, texture); end
  def threshold(_arg0); end
  def thumbnail(*_arg0); end
  def thumbnail!(*_arg0); end
  def ticks_per_second; end
  def ticks_per_second=(_arg0); end
  def tint(*_arg0); end
  def to_blob; end
  def to_color(_arg0); end
  def total_colors; end
  def total_ink_density; end
  def transparent(*_arg0); end
  def transparent_chroma(*_arg0); end
  def transparent_color; end
  def transparent_color=(_arg0); end
  def transpose; end
  def transpose!; end
  def transverse; end
  def transverse!; end
  def trim(*_arg0); end
  def trim!(*_arg0); end
  def undefine(_arg0); end
  def unique_colors; end
  def units; end
  def units=(_arg0); end
  def unsharp_mask(*_arg0); end
  def unsharp_mask_channel(*_arg0); end
  def view(x, y, width, height); end
  def vignette(*_arg0); end
  def virtual_pixel_method; end
  def virtual_pixel_method=(_arg0); end
  def watermark(*_arg0); end
  def wave(*_arg0); end
  def wet_floor(*_arg0); end
  def white_threshold(*_arg0); end
  def write(_arg0); end
  def x_resolution; end
  def x_resolution=(_arg0); end
  def y_resolution; end
  def y_resolution=(_arg0); end

  private

  def initialize_copy(_arg0); end

  class << self
    def _load(_arg0); end
    def capture(*_arg0); end
    def constitute(_arg0, _arg1, _arg2, _arg3); end
    def from_blob(_arg0); end
    def ping(_arg0); end
    def read(_arg0); end
    def read_inline(_arg0); end
  end
end

class Magick::Image::DrawOptions
  def initialize; end

  def affine=(_arg0); end
  def align=(_arg0); end
  def decorate=(_arg0); end
  def density=(_arg0); end
  def encoding=(_arg0); end
  def fill=(_arg0); end
  def fill_pattern=(_arg0); end
  def font=(_arg0); end
  def font_family=(_arg0); end
  def font_stretch=(_arg0); end
  def font_style=(_arg0); end
  def font_weight=(_arg0); end
  def gravity=(_arg0); end
  def pointsize=(_arg0); end
  def rotation=(_arg0); end
  def stroke=(_arg0); end
  def stroke_pattern=(_arg0); end
  def stroke_width=(_arg0); end
  def text_antialias=(_arg0); end
  def tile=(_arg0); end
  def undercolor=(_arg0); end
end

class Magick::Image::Info
  def initialize; end

  def [](*_arg0); end
  def []=(*_arg0); end
  def antialias; end
  def antialias=(_arg0); end
  def attenuate; end
  def attenuate=(_arg0); end
  def authenticate; end
  def authenticate=(_arg0); end
  def background_color; end
  def background_color=(_arg0); end
  def border_color; end
  def border_color=(_arg0); end
  def caption; end
  def caption=(_arg0); end
  def channel(*_arg0); end
  def colorspace; end
  def colorspace=(_arg0); end
  def comment; end
  def comment=(_arg0); end
  def compression; end
  def compression=(_arg0); end
  def define(*_arg0); end
  def delay; end
  def delay=(_arg0); end
  def density; end
  def density=(_arg0); end
  def depth; end
  def depth=(_arg0); end
  def dispose; end
  def dispose=(_arg0); end
  def dither; end
  def dither=(_arg0); end
  def endian; end
  def endian=(_arg0); end
  def extract; end
  def extract=(_arg0); end
  def filename; end
  def filename=(_arg0); end
  def fill; end
  def fill=(_arg0); end
  def font; end
  def font=(_arg0); end
  def format; end
  def format=(_arg0); end
  def freeze; end
  def fuzz; end
  def fuzz=(_arg0); end
  def gravity; end
  def gravity=(_arg0); end
  def image_type; end
  def image_type=(_arg0); end
  def interlace; end
  def interlace=(_arg0); end
  def label; end
  def label=(_arg0); end
  def matte_color; end
  def matte_color=(_arg0); end
  def monitor=(_arg0); end
  def monochrome; end
  def monochrome=(_arg0); end
  def number_scenes; end
  def number_scenes=(_arg0); end
  def orientation; end
  def orientation=(_arg0); end
  def origin; end
  def origin=(_arg0); end
  def page; end
  def page=(_arg0); end
  def pointsize; end
  def pointsize=(_arg0); end
  def quality; end
  def quality=(_arg0); end
  def sampling_factor; end
  def sampling_factor=(_arg0); end
  def scene; end
  def scene=(_arg0); end
  def server_name; end
  def server_name=(_arg0); end
  def size; end
  def size=(_arg0); end
  def stroke; end
  def stroke=(_arg0); end
  def stroke_width; end
  def stroke_width=(_arg0); end
  def texture=(_arg0); end
  def tile_offset; end
  def tile_offset=(_arg0); end
  def transparent_color; end
  def transparent_color=(_arg0); end
  def undefine(_arg0, _arg1); end
  def undercolor; end
  def undercolor=(_arg0); end
  def units; end
  def units=(_arg0); end
  def view; end
  def view=(_arg0); end
end

class Magick::Image::PolaroidOptions
  def initialize; end

  def align=(_arg0); end
  def border_color=(_arg0); end
  def decorate=(_arg0); end
  def density=(_arg0); end
  def encoding=(_arg0); end
  def fill=(_arg0); end
  def fill_pattern=(_arg0); end
  def font=(_arg0); end
  def font_family=(_arg0); end
  def font_stretch=(_arg0); end
  def font_style=(_arg0); end
  def font_weight=(_arg0); end
  def gravity=(_arg0); end
  def pointsize=(_arg0); end
  def shadow_color=(_arg0); end
  def stroke=(_arg0); end
  def stroke_pattern=(_arg0); end
  def stroke_width=(_arg0); end
  def text_antialias=(_arg0); end
  def undercolor=(_arg0); end
end

class Magick::Image::View
  def initialize(img, x, y, width, height); end

  def [](*args); end
  def dirty; end
  def dirty=(_arg0); end
  def height; end
  def sync(force = T.unsafe(nil)); end
  def update(rows); end
  def width; end
  def x; end
  def y; end
end

class Magick::Image::View::Pixels < ::Array
  include ::Observable

  def blue; end
  def blue=(v); end
  def green; end
  def green=(v); end
  def opacity; end
  def opacity=(v); end
  def red; end
  def red=(v); end
end

class Magick::Image::View::Rows
  include ::Observable

  def initialize(view, width, height, rows); end

  def [](*args); end
  def []=(*args); end
  def update(pixel); end

  private

  def cols(*args); end
  def each; end
end

class Magick::ImageList
  include ::Comparable
  include ::Enumerable

  def initialize(*filenames, &block); end

  def &(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def <<(obj); end
  def <=>(other); end
  def [](*args); end
  def []=(*args); end
  def __display__(*_arg0); end
  def __map__(&block); end
  def __map__!(&block); end
  def __respond_to__?(*_arg0); end
  def affinity(*_arg0); end
  def animate(*_arg0); end
  def append(_arg0); end
  def at(*args, &block); end
  def average; end
  def clear; end
  def clone; end
  def coalesce; end
  def collect(&block); end
  def collect!(&block); end
  def combine(*_arg0); end
  def compact; end
  def compact!; end
  def composite_layers(*_arg0); end
  def concat(other); end
  def copy; end
  def cur_image; end
  def deconstruct; end
  def delay=(d); end
  def delete(obj, &block); end
  def delete_at(ndx); end
  def delete_if(&block); end
  def display; end
  def dup; end
  def each(*args, &block); end
  def each_index(*args, &block); end
  def empty?(*args, &block); end
  def eql?(other); end
  def fetch(*args, &block); end
  def fill(*args, &block); end
  def find_all(&block); end
  def first(*args, &block); end
  def flatten_images; end
  def from_blob(*blobs, &block); end
  def hash(*args, &block); end
  def include?(*args, &block); end
  def index(*args, &block); end
  def indexes(*args); end
  def indices(*args); end
  def insert(index, *args); end
  def inspect; end
  def iterations=(n); end
  def last(*args); end
  def length(*args, &block); end
  def map(&block); end
  def map!(&block); end
  def marshal_dump; end
  def marshal_load(ary); end
  def method_missing(meth_id, *args, &block); end
  def montage; end
  def morph(_arg0); end
  def mosaic; end
  def new_image(cols, rows, *fill, &info_blk); end
  def optimize_layers(_arg0); end
  def partition(&block); end
  def ping(*files, &block); end
  def pop; end
  def push(*objs); end
  def quantize(*_arg0); end
  def read(*files, &block); end
  def reject(&block); end
  def reject!(&block); end
  def remap(*_arg0); end
  def replace(other); end
  def respond_to?(meth_id, priv = T.unsafe(nil)); end
  def reverse; end
  def reverse!; end
  def reverse_each; end
  def rindex(*args, &block); end
  def scene; end
  def scene=(n); end
  def select(&block); end
  def shift; end
  def size(*args, &block); end
  def slice(*args); end
  def slice!(*args); end
  def sort!(*args, &block); end
  def ticks_per_second=(t); end
  def to_a; end
  def to_blob; end
  def uniq; end
  def uniq!(*_args); end
  def unshift(obj); end
  def values_at(*args); end
  def write(_arg0); end
  def |(other); end

  protected

  def assert_image(obj); end
  def assert_image_array(ary); end
  def set_current(current); end

  private

  def get_current; end
end

class Magick::ImageList::Montage
  def initialize; end

  def background_color=(_arg0); end
  def border_color=(_arg0); end
  def border_width=(_arg0); end
  def compose=(_arg0); end
  def filename=(_arg0); end
  def fill=(_arg0); end
  def font=(_arg0); end
  def frame=(_arg0); end
  def freeze; end
  def geometry=(_arg0); end
  def gravity=(_arg0); end
  def matte_color=(_arg0); end
  def pointsize=(_arg0); end
  def shadow=(_arg0); end
  def stroke=(_arg0); end
  def texture=(_arg0); end
  def tile=(_arg0); end
  def title=(_arg0); end
end

class Magick::ImageMagickError < ::StandardError
  def initialize(*_arg0); end

  def magick_location; end
end

class Magick::ImageType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::ImplodePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ImpulseNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::ImpulseNoiseQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::InCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::IndexChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::IntegerInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)

class Magick::InterlaceType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::InverseColorInterpolate = T.let(T.unsafe(nil), Magick::SparseColorMethod)
Magick::ItalicStyle = T.let(T.unsafe(nil), Magick::StyleType)
Magick::IterativeDistanceMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::JBIG1Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::JBIG2Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::JPEG2000Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::JPEGCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::JPEGInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::JPEGPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::JincFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::KaiserFilter = T.let(T.unsafe(nil), Magick::FilterType)

class Magick::KernelInfo
  def initialize(_arg0); end

  def clone; end
  def dup; end
  def scale(_arg0, _arg1); end
  def scale_geometry(_arg0); end
  def unity_add(_arg0); end

  class << self
    def builtin(_arg0, _arg1); end
  end
end

class Magick::KernelInfoType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::KirschKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::LCHColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::LCHabColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::LCHuvColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::LMSColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::LSBEndian = T.let(T.unsafe(nil), Magick::EndianType)
Magick::LShiftQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::LZMACompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::LZWCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::LabColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::LagrangeFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::Lanczos2Filter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::Lanczos2SharpFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::LanczosFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::LanczosRadiusFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::LanczosSharpFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::LaplacianKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::LaplacianNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::LaplacianNoiseQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)

class Magick::LayerMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::LeftAlign = T.let(T.unsafe(nil), Magick::AlignType)
Magick::LeftBottomOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::LeftTopOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::LessGeometry = T.let(T.unsafe(nil), Magick::GeometryValue)
Magick::LessValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::LightenCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::LightenIntensityCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::LighterWeight = T.let(T.unsafe(nil), Magick::WeightType)
Magick::LineEndsKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::LineInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::LineJunctionsKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::LineThroughDecoration = T.let(T.unsafe(nil), Magick::DecorationType)
Magick::LinearBurnCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::LinearDodgeCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::LinearLightCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::LoGKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::LogColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::LogQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::LongPixel = T.let(T.unsafe(nil), Magick::StorageType)
Magick::Long_version = T.let(T.unsafe(nil), String)
Magick::LosslessJPEGCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::LuminizeCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::LuminosityChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::LuvColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::MAGICKCORE_QUANTUM_DEPTH = T.let(T.unsafe(nil), Integer)
Magick::MANAGED_MEMORY = T.let(T.unsafe(nil), TrueClass)
Magick::MSBEndian = T.let(T.unsafe(nil), Magick::EndianType)
Magick::MagentaChannel = T.let(T.unsafe(nil), Magick::ChannelType)

class Magick::MagickFunction < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::Magick_features = T.let(T.unsafe(nil), String)
Magick::Magick_version = T.let(T.unsafe(nil), String)
Magick::ManhattanKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::MaskVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::MathematicsCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::MaxQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::MeanAbsoluteErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::MeanErrorPerPixelErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::MeanQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::MeanSquaredErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::MedianQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::MergeLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::MeshInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)

class Magick::MetricType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::MiddleAnchor = T.let(T.unsafe(nil), Magick::AnchorType)
Magick::MinQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::MinimumGeometry = T.let(T.unsafe(nil), Magick::GeometryValue)
Magick::MinimumValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::MinusDstCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::MinusSrcCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::MirrorVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::MitchellFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::ModulateCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ModulusAddCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ModulusSubtractCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::MorphologyMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::MosaicLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::MultiplicativeGaussianNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::MultiplicativeNoiseQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::MultiplyCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::MultiplyQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::NearestInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::NoCompliance = T.let(T.unsafe(nil), Magick::ComplianceType)
Magick::NoCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::NoCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::NoDecoration = T.let(T.unsafe(nil), Magick::DecorationType)
Magick::NoDitherMethod = T.let(T.unsafe(nil), Magick::DitherMethod)
Magick::NoInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::NoValue = T.let(T.unsafe(nil), Magick::GeometryFlags)

class Magick::NoiseType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::NoneDispose = T.let(T.unsafe(nil), Magick::DisposeType)
Magick::NormalStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::NormalStyle = T.let(T.unsafe(nil), Magick::StyleType)
Magick::NormalWeight = T.let(T.unsafe(nil), Magick::WeightType)
Magick::NormalizeValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::NormalizedCrossCorrelationErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::NorthEastGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::NorthGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::NorthWestGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::OHTAColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::ObliqueStyle = T.let(T.unsafe(nil), Magick::StyleType)
Magick::OctagonKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::OctagonalKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::OilPaintPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::OpacityChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::OpaqueAlpha = T.let(T.unsafe(nil), Integer)
Magick::OpaqueAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::OpenIntensityMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::OpenMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::OptimizeImageLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::OptimizeLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::OptimizePlusLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::OptimizeTransLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::OptimizeType = T.let(T.unsafe(nil), Magick::ImageType)

class Magick::OptionalMethodArguments
  def initialize(img); end

  def define(key, val = T.unsafe(nil)); end
  def highlight_color=(color); end
  def lowlight_color=(color); end
  def method_missing(mth, val); end
end

Magick::OrQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)

class Magick::OrientationType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::OutCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::OverCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::OverlayCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::OverlineDecoration = T.let(T.unsafe(nil), Magick::DecorationType)
Magick::PNGInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::PadSpread = T.let(T.unsafe(nil), Magick::SpreadMethod)

class Magick::PaintMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::PaletteAlphaType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::PaletteBilevelAlphaType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::PaletteType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::PartitionInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::ParzenFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::PeakAbsoluteErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::PeakSignalToNoiseRatioErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::PeaksKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::PegtopLightCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::PercentGeometry = T.let(T.unsafe(nil), Magick::GeometryValue)
Magick::PercentValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::PerceptualHashErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::PerceptualIntent = T.let(T.unsafe(nil), Magick::RenderingIntent)
Magick::PerspectiveDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::PerspectiveProjectionDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::PinLightCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::Pixel
  include ::Comparable
  include ::Observable

  def initialize(*_arg0); end

  def <=>(_arg0); end
  def ===(_arg0); end
  def alpha; end
  def alpha=(_arg0); end
  def black; end
  def black=(_arg0); end
  def blue; end
  def blue=(_arg0); end
  def clone; end
  def cyan; end
  def cyan=(_arg0); end
  def dup; end
  def eql?(_arg0); end
  def fcmp(*_arg0); end
  def green; end
  def green=(_arg0); end
  def hash; end
  def intensity; end
  def magenta; end
  def magenta=(_arg0); end
  def marshal_dump; end
  def marshal_load(_arg0); end
  def red; end
  def red=(_arg0); end
  def to_color(*_arg0); end
  def to_hsla; end
  def to_s; end
  def yellow; end
  def yellow=(_arg0); end

  private

  def initialize_copy(_arg0); end

  class << self
    def from_color(_arg0); end
    def from_hsla(*_arg0); end
  end
end

class Magick::PixelInterpolateMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::PixelsPerCentimeterResolution = T.let(T.unsafe(nil), Magick::ResolutionType)
Magick::PixelsPerInchResolution = T.let(T.unsafe(nil), Magick::ResolutionType)
Magick::PizCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::Plane2CylinderDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::PlaneInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::PlusCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::PlusKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)

class Magick::Point < ::Struct
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::PointFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::PointMethod = T.let(T.unsafe(nil), Magick::PaintMethod)
Magick::PoissonNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::PoissonNoiseQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::PolarDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::PolynomialDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::PolynomialFunction = T.let(T.unsafe(nil), Magick::MagickFunction)
Magick::PowQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)

class Magick::PreviewType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::PreviousDispose = T.let(T.unsafe(nil), Magick::DisposeType)
Magick::PrewittKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)

class Magick::Primary < ::Struct
  def to_s; end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
  def z; end
  def z=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::PseudoClass = T.let(T.unsafe(nil), Magick::ClassType)
Magick::PsiNegative = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::PsiValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::Pxr24Compression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::QuadraticFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::QuantizePreview = T.let(T.unsafe(nil), Magick::PreviewType)

class Magick::QuantumExpressionOperator < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::QuantumPixel = T.let(T.unsafe(nil), Magick::StorageType)
Magick::QuantumRange = T.let(T.unsafe(nil), Integer)
Magick::RGBColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::RLECompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::RShiftQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::RaisePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::RandomNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::RandomVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::Rec601YCbCrColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::Rec709YCbCrColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)

class Magick::Rectangle < ::Struct
  def height; end
  def height=(_); end
  def to_s; end
  def width; end
  def width=(_); end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::RectangleKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::RedChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::ReduceNoisePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ReflectSpread = T.let(T.unsafe(nil), Magick::SpreadMethod)
Magick::RelativeIntent = T.let(T.unsafe(nil), Magick::RenderingIntent)
Magick::RemoveAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::RemoveDupsLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::RemoveZeroLayer = T.let(T.unsafe(nil), Magick::LayerMethod)

class Magick::RenderingIntent < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::RepeatSpread = T.let(T.unsafe(nil), Magick::SpreadMethod)
Magick::ReplaceCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ReplaceMethod = T.let(T.unsafe(nil), Magick::PaintMethod)
Magick::ResetMethod = T.let(T.unsafe(nil), Magick::PaintMethod)
Magick::ResizeDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)

class Magick::ResolutionType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::RhoValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::RidgesKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::RiemersmaDitherMethod = T.let(T.unsafe(nil), Magick::DitherMethod)
Magick::RightAlign = T.let(T.unsafe(nil), Magick::AlignType)
Magick::RightBottomOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::RightTopOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::RingKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::RobertsKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::RobidouxFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::RobidouxSharpFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::RollPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::RootMeanSquareQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::RootMeanSquaredErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::RotatePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::SRGBColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::SVGCompliance = T.let(T.unsafe(nil), Magick::ComplianceType)
Magick::SaturateCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::SaturationChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::SaturationIntent = T.let(T.unsafe(nil), Magick::RenderingIntent)
Magick::SaturationPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ScRGBColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::ScaleRotateTranslateDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::ScreenCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)

class Magick::Segment < ::Struct
  def to_s; end
  def x1; end
  def x1=(_); end
  def x2; end
  def x2=(_); end
  def y1; end
  def y1=(_); end
  def y2; end
  def y2=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::SegmentPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::SemiCondensedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::SemiExpandedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::SentinelDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::SeparatorValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::SetAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::SetQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::ShadePreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ShapeAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::SharpenPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ShearPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ShepardsColorInterpolate = T.let(T.unsafe(nil), Magick::SparseColorMethod)
Magick::ShepardsDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::ShortPixel = T.let(T.unsafe(nil), Magick::StorageType)
Magick::SigmaValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::SincFastFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::SincFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::SineQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::SinusoidFunction = T.let(T.unsafe(nil), Magick::MagickFunction)
Magick::SkeletonKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::SmoothMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::SobelKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::SoftLightCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::SolarizePreview = T.let(T.unsafe(nil), Magick::PreviewType)

class Magick::SolidFill
  def initialize(bgcolor); end

  def fill(img); end
end

Magick::SouthEastGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::SouthGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::SouthWestGravity = T.let(T.unsafe(nil), Magick::GravityType)

class Magick::SparseColorMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::SpiffPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::SplineFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::SplineInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)

class Magick::SpreadMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::SpreadPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::SquareKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::SrcAtopCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::SrcCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::SrcInCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::SrcOutCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::SrcOverCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::StartAnchor = T.let(T.unsafe(nil), Magick::AnchorType)

class Magick::StorageType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::StretchType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

class Magick::StyleType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::SubtractQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::SumQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::SwirlPreview = T.let(T.unsafe(nil), Magick::PreviewType)

class Magick::TextureFill
  def initialize(_arg0); end

  def fill(_arg0); end
end

Magick::ThickenMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::ThinSEKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::ThinningMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::ThresholdBlackQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::ThresholdCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::ThresholdPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::ThresholdQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::ThresholdWhiteQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::TileVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::TopHatMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::TopLeftOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::TopRightOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::TransparentAlpha = T.let(T.unsafe(nil), Integer)
Magick::TransparentAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::TransparentColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::TransparentVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::TriangleFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::TrimBoundsLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::TrueColorAlphaType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::TrueColorType = T.let(T.unsafe(nil), Magick::ImageType)

class Magick::TypeMetric < ::Struct
  def ascent; end
  def ascent=(_); end
  def bounds; end
  def bounds=(_); end
  def descent; end
  def descent=(_); end
  def height; end
  def height=(_); end
  def max_advance; end
  def max_advance=(_); end
  def pixels_per_em; end
  def pixels_per_em=(_); end
  def to_s; end
  def underline_position; end
  def underline_position=(_); end
  def underline_thickness; end
  def underline_thickness=(_); end
  def width; end
  def width=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

Magick::UltraCondensedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::UltraExpandedStretch = T.let(T.unsafe(nil), Magick::StretchType)
Magick::UndefinedAlign = T.let(T.unsafe(nil), Magick::AlignType)
Magick::UndefinedAlphaChannel = T.let(T.unsafe(nil), Magick::AlphaChannelOption)
Magick::UndefinedChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::UndefinedClass = T.let(T.unsafe(nil), Magick::ClassType)
Magick::UndefinedColorInterpolate = T.let(T.unsafe(nil), Magick::SparseColorMethod)
Magick::UndefinedColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::UndefinedCompliance = T.let(T.unsafe(nil), Magick::ComplianceType)
Magick::UndefinedCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::UndefinedCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::UndefinedDispose = T.let(T.unsafe(nil), Magick::DisposeType)
Magick::UndefinedDistortion = T.let(T.unsafe(nil), Magick::DistortMethod)
Magick::UndefinedDitherMethod = T.let(T.unsafe(nil), Magick::DitherMethod)
Magick::UndefinedEndian = T.let(T.unsafe(nil), Magick::EndianType)
Magick::UndefinedErrorMetric = T.let(T.unsafe(nil), Magick::MetricType)
Magick::UndefinedFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::UndefinedFunction = T.let(T.unsafe(nil), Magick::MagickFunction)
Magick::UndefinedGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::UndefinedIntent = T.let(T.unsafe(nil), Magick::RenderingIntent)
Magick::UndefinedInterlace = T.let(T.unsafe(nil), Magick::InterlaceType)
Magick::UndefinedInterpolatePixel = T.let(T.unsafe(nil), Magick::PixelInterpolateMethod)
Magick::UndefinedKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::UndefinedLayer = T.let(T.unsafe(nil), Magick::LayerMethod)
Magick::UndefinedMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::UndefinedOrientation = T.let(T.unsafe(nil), Magick::OrientationType)
Magick::UndefinedPixel = T.let(T.unsafe(nil), Magick::StorageType)
Magick::UndefinedPreview = T.let(T.unsafe(nil), Magick::PreviewType)
Magick::UndefinedQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::UndefinedResolution = T.let(T.unsafe(nil), Magick::ResolutionType)
Magick::UndefinedSpread = T.let(T.unsafe(nil), Magick::SpreadMethod)
Magick::UndefinedType = T.let(T.unsafe(nil), Magick::ImageType)
Magick::UndefinedVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::UnderlineDecoration = T.let(T.unsafe(nil), Magick::DecorationType)
Magick::UniformNoise = T.let(T.unsafe(nil), Magick::NoiseType)
Magick::UniformNoiseQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::UnityKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::UserDefinedKernel = T.let(T.unsafe(nil), Magick::KernelInfoType)
Magick::Version = T.let(T.unsafe(nil), String)
Magick::VerticalTileEdgeVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::VerticalTileVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)

class Magick::VirtualPixelMethod < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::VividLightCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::VoronoiColorInterpolate = T.let(T.unsafe(nil), Magick::SparseColorMethod)
Magick::VoronoiMorphology = T.let(T.unsafe(nil), Magick::MorphologyMethod)
Magick::WavePreview = T.let(T.unsafe(nil), Magick::PreviewType)

class Magick::WeightType < ::Magick::Enum
  def initialize(_arg0, _arg1); end

  def inspect; end

  class << self
    def values; end
  end
end

Magick::WelshFilter = T.let(T.unsafe(nil), Magick::FilterType)
Magick::WestGravity = T.let(T.unsafe(nil), Magick::GravityType)
Magick::WhiteVirtualPixelMethod = T.let(T.unsafe(nil), Magick::VirtualPixelMethod)
Magick::WidthValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::X11Compliance = T.let(T.unsafe(nil), Magick::ComplianceType)
Magick::XNegative = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::XPMCompliance = T.let(T.unsafe(nil), Magick::ComplianceType)
Magick::XValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::XYZColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::XiNegative = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::XiValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::XorCompositeOp = T.let(T.unsafe(nil), Magick::CompositeOperator)
Magick::XorQuantumOperator = T.let(T.unsafe(nil), Magick::QuantumExpressionOperator)
Magick::XyYColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YCCColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YCbCrColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YDbDrColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YIQColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YNegative = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::YPbPrColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YUVColorspace = T.let(T.unsafe(nil), Magick::ColorspaceType)
Magick::YValue = T.let(T.unsafe(nil), Magick::GeometryFlags)
Magick::YellowChannel = T.let(T.unsafe(nil), Magick::ChannelType)
Magick::ZipCompression = T.let(T.unsafe(nil), Magick::CompressionType)
Magick::ZipSCompression = T.let(T.unsafe(nil), Magick::CompressionType)
